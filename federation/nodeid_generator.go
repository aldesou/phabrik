package federation

import (
	"bytes"
	"crypto/md5"
	"encoding/binary"
	"fmt"
	"math/big"
	"strconv"
	"strings"
	"unicode/utf16"
)

// NodeIDFromHex convert string in 16 base from to NodeID
func NodeIDFromHex(v string) (NodeID, error) {
	u := NodeID{}

	i, ok := new(big.Int).SetString(v, 16)

	if !ok {
		return u, fmt.Errorf("fail to convert %v to Uint128", v)
	}

	u.Lo = i.Uint64()
	u.Hi = new(big.Int).Rsh(i, 64).Uint64()

	return u, nil
}

// NodeIDFromMD5 hash any string into a NodeID using MD5
func NodeIDFromMD5(v string) NodeID {
	h := md5.Sum([]byte(v))

	return NodeID{
		binary.LittleEndian.Uint64(h[:8]),
		binary.LittleEndian.Uint64(h[8:]),
	}
}

const (
	pearsonPrefix = "UTzJ"
	pearsonSuffix = "X3if"
)

var pearsonT = []uint8{
	0x01, 0x57, 0x31, 0x0C, 0xB0, 0xB2, 0x66, 0xA6, 0x79, 0xC1, 0x06, 0x54, 0xF9, 0xE6, 0x2C, 0xA3,
	0x0E, 0xC5, 0xD5, 0xB5, 0xA1, 0x55, 0xDA, 0x50, 0x40, 0xEF, 0x18, 0xE2, 0xEC, 0x8E, 0x26, 0xC8,
	0x6E, 0xB1, 0x68, 0x67, 0x8D, 0xFD, 0xFF, 0x32, 0x4D, 0x65, 0x51, 0x12, 0x2D, 0x60, 0x1F, 0xDE,
	0x19, 0x6B, 0xBE, 0x46, 0x56, 0xED, 0xF0, 0x22, 0x48, 0xF2, 0x14, 0xD6, 0xF4, 0xE3, 0x95, 0xEB,
	0x61, 0xEA, 0x39, 0x16, 0x3C, 0xFA, 0x52, 0xAF, 0xD0, 0x05, 0x7F, 0xC7, 0x6F, 0x3E, 0x87, 0xF8,
	0xAE, 0xA9, 0xD3, 0x3A, 0x42, 0x9A, 0x6A, 0xC3, 0xF5, 0xAB, 0x11, 0xBB, 0xB6, 0xB3, 0x00, 0xF3,
	0x84, 0x38, 0x94, 0x4B, 0x80, 0x85, 0x9E, 0x64, 0x82, 0x7E, 0x5B, 0x0D, 0x99, 0xF6, 0xD8, 0xDB,
	0x77, 0x44, 0xDF, 0x4E, 0x53, 0x58, 0xC9, 0x63, 0x7A, 0x0B, 0x5C, 0x20, 0x88, 0x72, 0x34, 0x0A,
	0x8A, 0x1E, 0x30, 0xB7, 0x9C, 0x23, 0x3D, 0x1A, 0x8F, 0x4A, 0xFB, 0x5E, 0x81, 0xA2, 0x3F, 0x98,
	0xAA, 0x07, 0x73, 0xA7, 0xF1, 0xCE, 0x03, 0x96, 0x37, 0x3B, 0x97, 0xDC, 0x5A, 0x35, 0x17, 0x83,
	0x7D, 0xAD, 0x0F, 0xEE, 0x4F, 0x5F, 0x59, 0x10, 0x69, 0x89, 0xE1, 0xE0, 0xD9, 0xA0, 0x25, 0x7B,
	0x76, 0x49, 0x02, 0x9D, 0x2E, 0x74, 0x09, 0x91, 0x86, 0xE4, 0xCF, 0xD4, 0xCA, 0xD7, 0x45, 0xE5,
	0x1B, 0xBC, 0x43, 0x7C, 0xA8, 0xFC, 0x2A, 0x04, 0x1D, 0x6C, 0x15, 0xF7, 0x13, 0xCD, 0x27, 0xCB,
	0xE9, 0x28, 0xBA, 0x93, 0xC6, 0xC0, 0x9B, 0x21, 0xA4, 0xBF, 0x62, 0xCC, 0xA5, 0xB4, 0x75, 0x4C,
	0x8C, 0x24, 0xD2, 0xAC, 0x29, 0x36, 0x9F, 0x08, 0xB9, 0xE8, 0x71, 0xC4, 0xE7, 0x2F, 0x92, 0x78,
	0x33, 0x41, 0x1C, 0x90, 0xFE, 0xDD, 0x5D, 0xBD, 0xC2, 0x8B, 0x70, 0x2B, 0x47, 0x6D, 0xB8, 0xD1,
}

// this is not a standard pearson hash
func pearsonHash(v string) []byte {
	hash := make([]byte, 16)
	var buf bytes.Buffer
	binary.Write(&buf, binary.LittleEndian, utf16.Encode([]rune(pearsonPrefix+v+pearsonSuffix)))

	paddedInput := buf.Bytes()

	for j := byte(0); j < 16; j++ {
		h := pearsonT[(paddedInput[0]+j)&0xFF]

		for i := 1; i < len(paddedInput); i++ {
			h = pearsonT[h^paddedInput[i]]
		}
		hash[j] = h
	}

	return hash
}

func NodeIDFromV4Generator(v string) (nodeId NodeID) {

	binary.Read(bytes.NewBuffer(pearsonHash(v)), binary.LittleEndian, &nodeId)
	// save hi and lo for later use
	hi := nodeId.Hi
	low := nodeId.Lo

	// recalculate hi base on index in name
	idx := strings.LastIndexFunc(v, func(r rune) bool { return r == '.' || r == '_' })

	roleName := v[:idx]
	instance_s := v[idx+1:]

	instance_i, err := strconv.ParseUint(instance_s, 10, 64)
	if err != nil {
		return
	}

	binary.Read(bytes.NewBuffer(pearsonHash(roleName)), binary.LittleEndian, &nodeId)

	offset := nodeId.Lo & 0xffffff
	instance_x := (offset + instance_i) & 0xffffff
	instance_y := (instance_x * 14938617) & 0xffffff

	// recalculate hi
	nodeId.Hi = (hi & 0x000000FFFFFFFFFF) | (instance_y << 40)
	nodeId.Lo = low

	return
}
